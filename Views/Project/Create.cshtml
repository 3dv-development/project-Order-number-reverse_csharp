@{
    ViewData["Title"] = "受注番号採番";
    var employees = ViewData["Employees"] as List<ProjectOrderNumberSystem.Models.Employee>;
}

<h2>受注番号採番</h2>

<form id="createForm">
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="category" class="form-label">カテゴリ <span class="text-danger">*</span></label>
                <select class="form-select" id="category" name="category" required>
                    <option value="">選択してください</option>
                    <option value="02">02 - 設計</option>
                    <option value="03">03 - トレーニング・たよれーる・データ販売</option>
                    <option value="04">04 - 製品販売</option>
                    <option value="06">06 - システム受託</option>
                    <option value="07">07 - システム小規模開発</option>
                    <option value="08">08 - 付帯業務</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="boardProject" class="form-label">Board案件を選択（オプション）</label>
                <select class="form-select" id="boardProject" name="boardProject">
                    <option value="">-- Board案件から選択 --</option>
                    @if (ViewBag.BoardProjects != null && ViewBag.BoardProjects.Count > 0)
                    {
                        foreach (var bp in ViewBag.BoardProjects)
                        {
                            <option value="@bp.ProjectNo"
                                    data-name="@bp.Name"
                                    data-client="@bp.ClientName"
                                    data-id="@bp.Id">
                                [@bp.ProjectNo] @bp.Name (@bp.ClientName)
                            </option>
                        }
                    }
                    else
                    {
                        <option value="" disabled>Board案件の取得に失敗しました</option>
                    }
                </select>
                <small class="form-text text-muted">
                    @if (ViewBag.BoardProjects != null && ViewBag.BoardProjects.Count > 0)
                    {
                        <span>Board案件を選択すると、案件Noと案件名、客先名が自動入力されます（@ViewBag.BoardProjects.Count 件）</span>
                    }
                    else
                    {
                        <span class="text-warning">Board APIから案件を取得できませんでした。手動で入力してください。</span>
                    }
                </small>
            </div>

            <div class="mb-3">
                <label for="caseNumber" class="form-label">案件No</label>
                <input type="text" class="form-control" id="caseNumber" name="caseNumber" />
                <small class="form-text text-muted">手動入力も可能</small>
            </div>

            <div class="mb-3">
                <label for="projectName" class="form-label">案件名 <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="projectName" name="projectName" required />
            </div>

            <div class="mb-3">
                <label for="clientName" class="form-label">客先名 <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="clientName" name="clientName" required />
            </div>
        </div>

        <div class="col-md-6">
            <div class="mb-3">
                <label for="staffId" class="form-label">担当者 <span class="text-danger">*</span></label>
                <select class="form-select" id="staffId" name="staffId" required>
                    <option value="">選択してください</option>
                    @if (employees != null)
                    {
                        foreach (var emp in employees)
                        {
                            <option value="@emp.EmployeeId">@emp.Name (@emp.EmployeeId)</option>
                        }
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="budget" class="form-label">費用（円） <span class="text-danger">*</span></label>
                <input type="number" class="form-control" id="budget" name="budget" value="0" required />
            </div>

            <div class="mb-3">
                <label for="deadline" class="form-label">納期 <span class="text-danger">*</span></label>
                <input type="date" class="form-control" id="deadline" name="deadline" required />
            </div>

            <div class="mb-3">
                <label for="remarks" class="form-label">備考</label>
                <textarea class="form-control" id="remarks" name="remarks" rows="3"></textarea>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary btn-lg">採番実行</button>
        <a href="/" class="btn btn-secondary btn-lg">キャンセル</a>
    </div>
</form>

@section Scripts {
<script>
// Board案件選択時の自動入力
document.getElementById('boardProject').addEventListener('change', function() {
    const selectedOption = this.options[this.selectedIndex];

    if (selectedOption.value) {
        // 選択された案件の情報を取得
        const projectNo = selectedOption.value;
        const projectName = selectedOption.getAttribute('data-name');
        const clientName = selectedOption.getAttribute('data-client');

        // 各フィールドに自動入力
        document.getElementById('caseNumber').value = projectNo;
        document.getElementById('projectName').value = projectName;
        document.getElementById('clientName').value = clientName;

        // 視覚的なフィードバック
        document.getElementById('projectName').classList.add('bg-success', 'bg-opacity-10');
        document.getElementById('clientName').classList.add('bg-success', 'bg-opacity-10');

        setTimeout(() => {
            document.getElementById('projectName').classList.remove('bg-success', 'bg-opacity-10');
            document.getElementById('clientName').classList.remove('bg-success', 'bg-opacity-10');
        }, 1000);
    } else {
        // 選択解除時はクリア
        document.getElementById('caseNumber').value = '';
        document.getElementById('projectName').value = '';
        document.getElementById('clientName').value = '';
    }
});

document.getElementById('createForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const formData = {
        category: document.getElementById('category').value,
        caseNumber: document.getElementById('caseNumber').value,
        projectName: document.getElementById('projectName').value,
        clientName: document.getElementById('clientName').value,
        staffId: document.getElementById('staffId').value,
        budget: parseInt(document.getElementById('budget').value),
        deadline: document.getElementById('deadline').value,
        remarks: document.getElementById('remarks').value
    };

    try {
        const response = await fetch('/Project/Create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (result.success) {
            alert(result.message);
            window.location.href = '/';
        } else {
            alert('エラー: ' + result.error);
        }
    } catch (error) {
        alert('エラーが発生しました: ' + error.message);
    }
});
</script>
}
